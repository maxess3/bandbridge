generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  MANUAL
  GOOGLE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  USER
  ADMIN
}

enum ProfileRole {
  MUSICIAN
  PROFESSIONAL
  TALENT_SCOUT
}

enum MusicGenre {
  ROCK
  JAZZ
  ELECTRO
}

enum Platform {
  YOUTUBE
  INSTAGRAM
  TIKTOK
  TWITTER
  SOUNDCLOUD
}

enum ConcertCount {
  NOT_SPECIFIED
  LESS_THAN_10
  TEN_TO_FIFTY
  FIFTY_TO_HUNDRED
  MORE_THAN_HUNDRED
}

enum RehearsalFrequency {
  NOT_SPECIFIED
  ONCE_PER_WEEK
  TWO_TO_THREE_PER_WEEK
  MORE_THAN_THREE_PER_WEEK
}

enum PracticeType {
  NOT_SPECIFIED
  HOBBY
  ACTIVE
}

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  provider            Provider  @default(MANUAL)
  password            String?
  created_at          DateTime  @default(now())
  role                UserRole  @default(USER)
  verified            Boolean   @default(false)
  password_changed_at DateTime?
  Profile             Profile?  @relation
  Post                Post[]
}

model Profile {
  id                String       @id @default(uuid())
  followers         Profile[]    @relation("UserFollows")
  following         Profile[]    @relation("UserFollows")
  gender            Gender       @default(OTHER)
  username          String?      @unique
  firstName         String       @db.VarChar(60)
  lastName          String       @db.VarChar(60)
  birthDate         DateTime?    @db.Date
  country           String?
  city              String?
  zipCode           String?
  role              ProfileRole  @default(MUSICIAN)
  instruments       Instrument[]
  genre             MusicGenre?
  socialLinks       SocialLink[]
  band              Band[]
  lastActiveAt      DateTime?
  profilePictureKey String?
  description       String?      @db.Text
  concertsPlayed    ConcertCount @default(NOT_SPECIFIED)
  rehearsalsPerWeek RehearsalFrequency @default(NOT_SPECIFIED)
  practiceType      PracticeType @default(NOT_SPECIFIED)
  userId            String       @unique
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Instrument {
  id          String  @id @default(uuid())
  name        String
  yearStarted Int
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  Platform
  url       String
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([platform, profileId])
}

model Band {
  id      String    @id @default(uuid())
  name    String    @unique
  members Profile[]
}

model Post {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  department String   @db.VarChar(60)
  city       String   @db.VarChar(60)
  title      String
  content    String
  country    String   @db.VarChar(60)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, title])
}
